// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gizmogeo.Infrastructure.Persistance;

#nullable disable

namespace gizmogeo.Infrastructure.Migrations
{
    [DbContext(typeof(FixGoDbContext))]
    [Migration("20250712010936_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcceptedRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RespondedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServiceRequestId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("AcceptedRequests");
                });

            modelBuilder.Entity("ServiceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PendingPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecoveryCodeHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletedOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedRequestId");

                    b.HasIndex("CompletedOrderId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.CompletedOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptedRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompletedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CompletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FinalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedByName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedRequestId")
                        .IsUnique()
                        .HasFilter("[AcceptedRequestId] IS NOT NULL");

                    b.HasIndex("CompletedByUserId");

                    b.ToTable("CompletedOrders");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AcceptedRequest", b =>
                {
                    b.HasOne("gizmogeo.Domain.Entities.Category", "Category")
                        .WithMany("AcceptedRequests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ServiceRequest", "ServiceRequest")
                        .WithOne("AcceptedRequest")
                        .HasForeignKey("AcceptedRequest", "ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("AcceptedRequestsAsAdmin")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ServiceRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceRequest", b =>
                {
                    b.HasOne("gizmogeo.Domain.Entities.Category", "Category")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("gizmogeo.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("AcceptedRequest", "AcceptedRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("AcceptedRequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("gizmogeo.Domain.Entities.CompletedOrder", "CompletedOrder")
                        .WithMany("Attachments")
                        .HasForeignKey("CompletedOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ServiceRequest", "ServiceRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AcceptedRequest");

                    b.Navigation("CompletedOrder");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.CompletedOrder", b =>
                {
                    b.HasOne("AcceptedRequest", "AcceptedRequest")
                        .WithOne("CompletedOrder")
                        .HasForeignKey("gizmogeo.Domain.Entities.CompletedOrder", "AcceptedRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("User", "CompletedByUser")
                        .WithMany("CompletedOrders")
                        .HasForeignKey("CompletedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcceptedRequest");

                    b.Navigation("CompletedByUser");
                });

            modelBuilder.Entity("AcceptedRequest", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CompletedOrder");
                });

            modelBuilder.Entity("ServiceRequest", b =>
                {
                    b.Navigation("AcceptedRequest");

                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("AcceptedRequestsAsAdmin");

                    b.Navigation("CompletedOrders");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.Category", b =>
                {
                    b.Navigation("AcceptedRequests");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.CompletedOrder", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("gizmogeo.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
